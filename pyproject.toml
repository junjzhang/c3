[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "c3cli"
dynamic = ["version"]
description = "Claude Code Configuration Manager CLI"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = ["cli", "dotfiles", "templates", "configuration"]
authors = [
  {name = "Junjie Zhang", email = "junj.jay.zhang@gmail.com"},
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "pydantic>=2.0",
  "typer>=0.12.0",
  "gitpython>=3.1.0",
]

[project.optional-dependencies]
dev = [
  "pytest>=8.0",
  "pytest-asyncio>=0.23.0",
  "ruff>=0.6.0",
  "mypy>=1.11.0",
  "black>=24.0.0",
]

[project.urls]
Documentation = "https://github.com/unknown/c3cli#readme"
Issues = "https://github.com/unknown/c3cli/issues"
Source = "https://github.com/unknown/c3cli"

[project.scripts]
c3cli = "src.main:cli"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.lint]
dependencies = [
  "black>=23.0.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py311"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
line-length = 120
output-format = "grouped"
target-version = "py310"

[tool.ruff.lint]
select = [
  # isort
  "I",
  # bugbear rules
  "B",
  # remove unused imports
  "F401",
  # bare except statements
  "E722",
  # unused arguments
  "ARG",
  # print statements
  "T201",
  "T203",
  # misuse of typing.TYPE_CHECKING
  "TCH004",
  # import rules
  "TID251",
  # docstring
  "D"
]
ignore = [
  # mutable defaults
  "B006",
  # On top of the Google convention, disable `D417`
  "D417",
  "D101",
  "D102",
  "D103",
  "D105",
  "D107",
  "T201",
  "B904",
]
unfixable = [
  # disable auto fix for print statements
  "T201",
  "T203",
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.isort]
length-sort = true
length-sort-straight = true
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = ["ARG001"]

[tool.coverage.run]
source_pkgs = ["src", "tests"]
branch = true
parallel = true
omit = [
  "src/__about__.py",
]

[tool.coverage.paths]
c3cli = ["src", "*/c3cli/src"]
tests = ["tests", "*/c3cli/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = "git.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=85",
]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]